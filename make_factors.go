// MIT License

// Copyright (c) 2018 Akhil Indurti

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// +build ignore

// This program generates factors.go

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"math/big"
)

var header = []byte(`// MIT License

// Copyright (c) 2018 Akhil Indurti

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by go run make_factors.go. DO NOT EDIT.

package extprec

`)

func main() {
	buf := bytes.NewBuffer(header)

	gen(buf, "factors32", "uint32", factors32)
	gen(buf, "factors64", "uint64", factors64)

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile("factors.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}

func gen(w io.Writer, name, typ string, f func(uint, uint) (string, string)) {
	fmt.Fprintf(w, "var %s = []struct{ x, y, hi, lo, rem %s }{", name, typ)
	for i := uint(0); i <= 8; i++ {
		for j := uint(0); j <= 8; j++ {
			s1, s2 := f(i, j)
			w.Write([]byte("\n\t" + s1))
			if len(s2) != 0 {
				w.Write([]byte("\n\t" + s2))
			}
		}
	}
	fmt.Fprint(w, "\n}\n\n")
}

func factors32(i, j uint) (string, string) {
	x := uint64((1 << (4 * i)) - 1)
	y := uint64((1 << (4 * j)) - 1)
	prod := x * y
	hi := prod >> 32
	lo := prod & 0xFFFFFFFF
	rem := uint64(0)
	s1 := fmt.Sprintf("{0x%08X, 0x%08X, 0x%08X, 0x%08X, 0x%08X},", x, y, hi, lo, rem)

	np := prod + uint64(i+j)
	if np < prod {
		return s1, ""
	}
	hi = np >> 32
	lo = np & 0xFFFFFFFF
	rem = uint64(i + j)
	s2 := fmt.Sprintf("{0x%08X, 0x%08X, 0x%08X, 0x%08X, 0x%08X},", x, y, hi, lo, rem)

	return s1, s2
}

func factors64(i, j uint) (string, string) {
	x := uint64((1 << (8 * i)) - 1)
	y := uint64((1 << (8 * j)) - 1)
	bx := big.NewInt(0).SetUint64(x)

	prod := big.NewInt(0).SetUint64(y)
	prod = prod.Mul(bx, prod)

	higher := big.NewInt(0).Set(prod)
	higher = higher.Rsh(higher, 64)
	hi := higher.Uint64()

	mask := big.NewInt(0).SetUint64(0xFFFFFFFFFFFFFFFF)
	lower := big.NewInt(0).Set(prod)
	lower = lower.And(lower, mask)
	lo := lower.Uint64()

	rem := uint64(0)
	s1 := fmt.Sprintf("{0x%016X, 0x%016X, 0x%016X, 0x%016X, 0x%016X},", x, y, hi, lo, rem)

	ij := big.NewInt(0).SetUint64(uint64(i + j))
	np := big.NewInt(0).Set(prod)
	np = np.Add(np, ij)
	if np.Cmp(prod) == 0 {
		return s1, ""
	}

	higher = higher.Set(np)
	higher = higher.Rsh(higher, 64)
	hi = higher.Uint64()

	lower = lower.Set(np)
	lower = lower.And(lower, mask)
	lo = lower.Uint64()

	rem = uint64(i + j)
	s2 := fmt.Sprintf("{0x%016X, 0x%016X, 0x%016X, 0x%016X, 0x%016X},", x, y, hi, lo, rem)

	return s1, s2
}
